// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package mock_main is a generated GoMock package.
package mock_main

import (
	grpc_server "api-channel/pkg/grpc_server"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServerInterface is a mock of ServerInterface interface.
type MockServerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServerInterfaceMockRecorder
}

// MockServerInterfaceMockRecorder is the mock recorder for MockServerInterface.
type MockServerInterfaceMockRecorder struct {
	mock *MockServerInterface
}

// NewMockServerInterface creates a new mock instance.
func NewMockServerInterface(ctrl *gomock.Controller) *MockServerInterface {
	mock := &MockServerInterface{ctrl: ctrl}
	mock.recorder = &MockServerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerInterface) EXPECT() *MockServerInterfaceMockRecorder {
	return m.recorder
}

// NewChatServer mocks base method.
func (m *MockServerInterface) NewChatServer(serverId string) *grpc_server.Server {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewChatServer", serverId)
	ret0, _ := ret[0].(*grpc_server.Server)
	return ret0
}

// NewChatServer indicates an expected call of NewChatServer.
func (mr *MockServerInterfaceMockRecorder) NewChatServer(serverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewChatServer", reflect.TypeOf((*MockServerInterface)(nil).NewChatServer), serverId)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// ConnectIfMaster mocks base method.
func (m *MockClientInterface) ConnectIfMaster(addr string) (*grpc_server.FollowedServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectIfMaster", addr)
	ret0, _ := ret[0].(*grpc_server.FollowedServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectIfMaster indicates an expected call of ConnectIfMaster.
func (mr *MockClientInterfaceMockRecorder) ConnectIfMaster(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectIfMaster", reflect.TypeOf((*MockClientInterface)(nil).ConnectIfMaster), addr)
}
